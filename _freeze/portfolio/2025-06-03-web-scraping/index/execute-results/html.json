{
  "hash": "7481b0bbf34d9507f52cc0aac8d333fb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Web Scraping\"\ndescription: \"Scraping data from cheese.com with the rvest package\"\nauthor: \n  - name: \"Nick Soares\"\n    url: https://github.com/nasoares\ndate: 06-03-2025\nimage: \"cheese_list.jpg\"\n---\n\n::: {.cell context='setup'}\n\n:::\n\n\n\n# When web scraping, always check the `robots.txt` file to ensure you're complying with the rules the website owners have outlined. This is an exmple of ethical scraping!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://www.cheese.com/robots.txt\"\n\ncon <- curl(url)\nreadLines(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"User-agent: *\"                              \n[2] \"Sitemap: https://www.cheese.com/sitemap.xml\"\n```\n\n\n:::\n:::\n\n\n\n# Using `html_attr()` from the `rvest` package to receive a character vector containing all items with a particular attribute from cheese.com\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheese_page <- read_html(\"https://www.cheese.com\")\n\n#Using html_attr() to find the destinations of all links on the cheese.com home page\ncheese_links <- cheese_page %>% \n  html_elements(\"a\") %>% \n  html_attr(\"href\")\n\nhead(cheese_links)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/\"              \"/alphabetical/\" \"#\"              \"/by_type/\"     \n[5] \"/by_country/\"   \"/by_milk/\"     \n```\n\n\n:::\n\n```{.r .cell-code}\n#Using html_attr() to find the sources of all images on the cheese.com home page\ncheese_pics <- cheese_page %>%\n  html_elements(\"img\") %>%\n  html_attr(\"src\")\n\nhead(cheese_pics)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/static/common/img/logo.3feae68fc57a.svg\"                        \n[2] \"/static/common/img/icons/social-icons/facebook.98fc69d1981d.svg\" \n[3] \"/static/common/img/icons/social-icons/instagram.b64d52d8256e.svg\"\n[4] \"/static/common/img/icons/social-icons/x.bd16396d1592.svg\"        \n[5] \"/static/common/img/icons/social-icons/youtube.24a41972a277.svg\"  \n[6] \"/static/common/img/icons/icon-cheese-gifts.398231b86acd.svg\"     \n```\n\n\n:::\n:::\n\n\n\n# Building functions for scraping cheese.com for information on all cheeses\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Helper functions\n\nget_text_from_page <- function(page, css_selector) {\n    \n  page %>%\n    html_elements(css_selector) %>%\n    html_text(trim = T)\n}\n\nget_url_from_page <- function(page, css_selector) {\n    \n  page %>%\n    html_elements(css_selector) %>%\n    html_attr(\"href\")\n}\n\nget_image_from_page <- function(page, css_selector) {\n    \n  page %>%\n    html_elements(css_selector) %>%\n    html_attr(\"src\")\n}\n\nscrape_page <- function(url) {\n    \n    # 1 second crawl delay\n    Sys.sleep(1)\n    \n    # Read the page\n    page <- read_html(url)\n    \n    # Grab elements from the page\n    cheese_names <- get_text_from_page(page, \".product-item\")\n    cheese_url <- get_url_from_page(page, \".product-item a\")\n    cheese_image <- get_image_from_page(page, \".product-item img\")\n    \n    # Clean cheese names\n    cheese_names <- cheese_names %>%\n      trimws()\n    \n    cheese_names <- ifelse(\n      str_detect(cheese_names, \"Stores >\"),\n      str_trim(str_extract(cheese_names, \"[^\\n]+$\")),\n      cheese_names\n      )\n    \n    # Full cheese URL\n    base_url <- \"https://www.cheese.com\"\n    cheese_url <- paste0(base_url, cheese_url)\n    cheese_url <- unique(cheese_url[!grepl(\"store\", cheese_url)]) #remove store links + duplicates\n    \n    # Find cheeses with image\n    has_image <- ifelse(grepl(\"static\", cheese_image), \"No\", \"Yes\")\n    \n    #Put page elements into a dataframe\n    cheeses <- data.frame(\n      cheese = cheese_names,\n      url = cheese_url,\n      image = has_image\n    )\n    \n    return(cheeses)\n}\n\n# Scraping the website\n\nbase_url <- \"https://www.cheese.com/alphabetical/?per_page=100\"\n\nurls_all_pages <- c(str_c(base_url,\n                          \"&page=\",\n                          1:21)\n                     )\n\nall_pages <- map(urls_all_pages, scrape_page)\n\nall_cheeses <- bind_rows(all_pages)\n\nhead(all_cheeses)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                             cheese\n1           2 Year Aged Cumin Gouda\n2            3-Cheese Italian Blend\n3 30 Month Aged Parmigiano Reggiano\n4           3yrs Aged Vintage Gouda\n5                        Aarewasser\n6                  Abbaye de Belloc\n                                                             url image\n1                https://www.cheese.com/2-year-aged-cumin-gouda/   Yes\n2                 https://www.cheese.com/3-cheese-italian-blend/    No\n3 https://www.cheese.com/30-month-aged-parmigiano-reggiano-150g/   Yes\n4                https://www.cheese.com/3yrs-aged-vintage-gouda/   Yes\n5                             https://www.cheese.com/aarewasser/   Yes\n6                       https://www.cheese.com/abbaye-de-belloc/   Yes\n```\n\n\n:::\n:::\n\n\n\n# Building functions for scraping cheese.com for more detailed information from specific cheeses\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Helper functions\n\nclean_info <- function(text, fallback) {\n  if (length(text) == 0) {\n    return(fallback)\n  } else {\n    cleaned <- sub(\".*?:\\\\s*\", \"\", text) # Extract everything after \": \"\n    return(trimws(cleaned))\n  }\n}\n\nscrape_cheese <- function(url) {\n    \n    # 1 second crawl delay\n    Sys.sleep(1)\n    \n    # Read the page\n    page <- read_html(url)\n    \n    # Grab elements from the page\n    milk <- get_text_from_page(page, \".summary_milk\")\n    country <- get_text_from_page(page, \".summary_country\")\n    family <- get_text_from_page(page, \".summary_family\")\n    type <- get_text_from_page(page, \".summary_moisture_and_type\")\n    flavor <- get_text_from_page(page, \".summary_taste\")\n    \n    # Clean elements\n    milk <- clean_info(milk, \"No milk information available\")\n    country <- clean_info(country, \"No country information available\")\n    family <- clean_info(family, \"No family information available\")\n    type <- clean_info(type, \"No type information available\")\n    flavor <- clean_info(flavor, \"No flavor information available\")\n    \n    # Puts elements into data frame\n    cheese <- data.frame(\n      milk = milk,\n      country = country,\n      family = family,\n      type = type,\n      flavor = flavor\n    )\n}\n\n# Scraping the website\n\nsampled_cheeses <- all_cheeses %>%\n  sample_n(10)\n\ndetailed_cheeses <- sampled_cheeses$url %>%\n  map_df(scrape_cheese)\n\nfinal_cheese_info <- bind_cols(\n  sampled_cheeses %>% select(cheese),\n  detailed_cheeses\n)\n\nprint(final_cheese_info)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                        cheese\n1                    Snow Camp\n2                       Coalho\n3      Stella Reduced Fat Blue\n4                  Blue Yonder\n5                     Grabetto\n6                San Sim√≥n DOP\n7  Zanetti Parmigiano Reggiano\n8                    Lou Palou\n9            Caprice des Dieux\n10                      Postel\n                                                 milk       country\n1         Made from pasteurized cow's and goat's milk United States\n2   Made from pasteurized or unpasteurized cow's milk        Brazil\n3                    Made from pasteurized cow's milk United States\n4                  Made from unpasteurized cow's milk United States\n5  Made from pasteurized or unpasteurized goat's milk     Australia\n6                    Made from pasteurized cow's milk         Spain\n7                  Made from unpasteurized cow's milk         Italy\n8                                Made from cow's milk        France\n9                    Made from pasteurized cow's milk        France\n10                   Made from pasteurized cow's milk       Belgium\n                            family                          type\n1  No family information available                          soft\n2  No family information available                     semi-hard\n3                             Blue            semi-soft, artisan\n4                             Blue        semi-soft, blue-veined\n5  No family information available       semi-hard, soft-ripened\n6  No family information available                     semi-soft\n7                         Parmesan                 hard, artisan\n8  No family information available                     semi-soft\n9  No family information available            soft, soft-ripened\n10 No family information available No type information available\n                            flavor\n1                  buttery, creamy\n2                    acidic, salty\n3                    full-flavored\n4                           subtle\n5              nutty, sharp, tangy\n6                          buttery\n7                    nutty, savory\n8  No flavor information available\n9           buttery, nutty, smooth\n10 No flavor information available\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}