[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nick Soares",
    "section": "",
    "text": "Nick has lived in SLO County for most of his life and spends his free time trail running and surfing the local beach breaks. He graduated from Cal Poly in 2021 with a B.S. in Marine Sciences and minors in Statistics and Environmental Studies. While at Cal Poly, he worked as a research assistant studying Harmful Algal Blooms and nearshore rockfish populations. After his undergraduate studies, he went on to work at the Morro Bay National Estuary Program as their Monitoring Coordinator, where he is responsible for coordinating sampling events conducted within the estuary and generating water quality reports. Upon returning to Cal Poly as a Biological Sciences Masters student in 2024, he is focused on applying amplicon sequencing and imaging flow cytometry techniques to characterize the microbial community of the Morro Bay estuary."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "blog-posts.html",
    "href": "blog-posts.html",
    "title": "Blog Posts",
    "section": "",
    "text": "Generative Art\n\n\nMaking art from data with the ambient package\n\n\n\nNick Soares\n\n\nJun 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeb Scraping\n\n\nScraping data from cheese.com with the rvest package\n\n\n\nNick Soares\n\n\nJun 3, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing APIs\n\n\nCommunicating with the Public satellite pass API\n\n\n\nNick Soares\n\n\nJun 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWriting Functions\n\n\nWriting efficient functions and using purrr for iteration\n\n\n\nNick Soares\n\n\nJun 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDynamic Dashboard\n\n\nDeploying dynamic data dashboards with Shiny\n\n\n\nNick Soares\n\n\nMay 3, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatic Dashboard\n\n\nDeploying static data dashboards\n\n\n\nNick Soares\n\n\nMay 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvanced Visualizations\n\n\nUsing leaflet and gganimate\n\n\n\nNick Soares\n\n\nApr 30, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "portfolio/2025-04-30-advanced-visualizations/index.html",
    "href": "portfolio/2025-04-30-advanced-visualizations/index.html",
    "title": "Advanced Visualizations",
    "section": "",
    "text": "Making maps with the leaflet package\n\n#Loading pre-processed shapefile\nwgm_sf&lt;-read_sf(\"wgm_sf.shp\")\n\n#Creating a color palette to display data\nmypalette&lt;-colorNumeric(\n  palette=\"viridis\",domain=wgm_sf$KnowLevel,\n  na.color=\"transparent\"\n)\n\n#Text labels\nmytext&lt;-paste(\n  \"Country: \",wgm_sf$NAME,\"&lt;br/&gt;\",\n  \"Knowledge Level: \",round(wgm_sf$KnowLevel,0),\"%\",\"&lt;/br&gt;\",\n  sep=\"\"\n)%&gt;%\n  lapply(htmltools::HTML)\n\n#Display map\nleaflet(wgm_sf)%&gt;%\n  addTiles()%&gt;%\n  setView(lat=0,lng=0,zoom=2)%&gt;%\n  addPolygons(fillColor = ~mypalette(KnowLevel),stroke = F,\n              label=mytext,fillOpacity = 0.9)%&gt;%\n  addLegend(pal = mypalette,values=~KnowLevel,\n            title=\"Self-Reported &lt;/br&gt; Knowledge Level (%)\",position = \"bottomleft\",\n            opacity=0.9,labFormat = labelFormat(suffix = \"%\"))\n\n\n\n\n\n\n\nMaking animated plots with the gganimate package\n\n#Loading pre-cleaned data\nwgm_sci_age&lt;-readRDS(\"wgm_sci_age.RDS\")\n\n#Plotting with gganimate\nggplot(wgm_sci_age,aes(Prop,Region,fill=AgeRange),color=\"black\")+\n  geom_bar(stat=\"identity\",position = \"dodge\")+\n  scale_y_discrete(limits=rev)+\n  scale_fill_manual(values=c(\"#003366\",\"#33CCCC\",\"#FFCC00\"),\n                    guide=guide_legend(reverse = T))+ \n  scale_x_continuous(labels = scales::percent_format(accuracy = 1))+\n  labs(x=NULL,y=NULL,title=\"Perceived Knowledge About Science By Region and Age Group\")+\n  theme_minimal()+\n  theme(legend.position = c(0.85,0.8),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_blank(),\n        text = element_text(size=20),\n        panel.background = element_rect(fill = \"#faf9f6\",color = \"#faf9f6\"),\n        plot.background = element_rect(fill=\"#faf9f6\",color=\"#faf9f6\"),\n        panel.grid.major.x = element_line(linetype = \"dashed\",colour = \"grey\"),\n        plot.title.position = \"plot\")+\n  transition_states(Region,wrap=F)+\n  shadow_mark()+\n  enter_fade()"
  },
  {
    "objectID": "portfolio/2025-05-02-static-dashboard/index.html",
    "href": "portfolio/2025-05-02-static-dashboard/index.html",
    "title": "Static Dashboard",
    "section": "",
    "text": "Static dashboard hosted on Quarto Pub"
  },
  {
    "objectID": "portfolio/2025-05-03-dynamic-dashboard/index.html",
    "href": "portfolio/2025-05-03-dynamic-dashboard/index.html",
    "title": "Dynamic Dashboard",
    "section": "",
    "text": "Dynamic dashboard hosted on shinyapps.io with interactive elements from the Shiny package"
  },
  {
    "objectID": "portfolio/2025-06-01-writing-functions/index.html",
    "href": "portfolio/2025-06-01-writing-functions/index.html",
    "title": "Writing Functions",
    "section": "",
    "text": "Writing a function that removes outliers in a dataset based on a user-defined SD threshold.\n\nremove_outliers &lt;- function(df, ..., sd_thresh = 3){\n  \n  #check for non-numeric columns\n  non_num &lt;- df %&gt;%\n    select(...) %&gt;%\n    map_lgl(~ !(is.numeric(.x))) %&gt;%\n    keep(identity) %&gt;%\n    names()\n  \n  if (length(non_num) &gt; 0) {\n    stop(\"The following columns are not numeric: \",\n         str_c(non_num, collapse = \", \"))\n  }\n  \n  #finding z-scores of each column\n  z_scores &lt;- df %&gt;% \n    select(...) %&gt;% \n    mutate(across(everything(), scale),\n           id = as.character(c(1:nrow(df)))) %&gt;%\n    filter(if_all(everything(), ~ .&lt; sd_thresh),\n           if_all(everything(), ~ .&gt; sd_thresh * -1))\n  \n  #removing outliers by row ID\n  no_outliers &lt;- df %&gt;%\n    filter(row_number() %in% as.numeric(z_scores$id))\n  \n  #final output\n  no_outliers\n\n}\n\n\n\nWriting a function that imputes missing numeric values in a dataset with a default value defined by the user.\n\nimpute_missing &lt;- function(df, ..., impute_fun = mean){\n  \n  #check for non-numeric columns\n  non_num &lt;- df %&gt;%\n    select(...) %&gt;%\n    map_lgl(~ !(is.numeric(.x))) %&gt;%\n    keep(identity) %&gt;%\n    names()\n  \n  if (length(non_num) &gt; 0) {\n    stop(\"The following columns are not numeric: \",\n         str_c(non_num, collapse = \", \"))\n  }\n  \n  #nested function for finding NAs and replacing with user-defined function\n  find_replace &lt;- function(col, nested_fun = impute_fun){\n    col_omit &lt;- na.omit(col)\n    col_fxn &lt;- nested_fun(col_omit)\n    col_replace &lt;- replace_na(col, col_fxn)\n    col_replace\n  }\n  \n  #applying the function to the user-defined columns\n  impute_df &lt;- df %&gt;%\n    select(...) %&gt;%\n    mutate(across(everything(), find_replace)) \n  \n  #placing imputed columns back into main df\n  merged_df &lt;- df\n  merged_df[,colnames(impute_df)] &lt;- impute_df\n  \n  #final output\n  merged_df\n  \n}\n\n\n\nCombining the functions defined above into one function that fits a linear regression model for the supplied dataset.\n\nfit_model &lt;- function(df, impute_missing = F, remove_outliers = F, \n                      mod_formula, ...) {\n  if (impute_missing == T) {\n    df &lt;- impute_missing(df, ...)\n  }\n  \n  if (remove_outliers == T) {\n    df &lt;- remove_outliers(df, ...)\n  }\n  \n  summary(lm(mod_formula, data = df))\n}\n\n\n\nCreating a data frame of argument combinations with crossing() and iterating over every combination with pmap() from the purrr package to generate multiple regression models.\n\ndf_arg_analyses &lt;- crossing(\n  impute = c(TRUE, FALSE),\n  remove_outliers = c(TRUE, FALSE), \n  mod = c(price ~ carat, \n          price ~ carat + cut,\n          price ~ carat + cut + clarity,\n          price ~ carat + cut + clarity + color)\n)\ndf_arg_analyses\n\n# A tibble: 16 × 3\n   impute remove_outliers mod      \n   &lt;lgl&gt;  &lt;lgl&gt;           &lt;list&gt;   \n 1 FALSE  FALSE           &lt;formula&gt;\n 2 FALSE  FALSE           &lt;formula&gt;\n 3 FALSE  FALSE           &lt;formula&gt;\n 4 FALSE  FALSE           &lt;formula&gt;\n 5 FALSE  TRUE            &lt;formula&gt;\n 6 FALSE  TRUE            &lt;formula&gt;\n 7 FALSE  TRUE            &lt;formula&gt;\n 8 FALSE  TRUE            &lt;formula&gt;\n 9 TRUE   FALSE           &lt;formula&gt;\n10 TRUE   FALSE           &lt;formula&gt;\n11 TRUE   FALSE           &lt;formula&gt;\n12 TRUE   FALSE           &lt;formula&gt;\n13 TRUE   TRUE            &lt;formula&gt;\n14 TRUE   TRUE            &lt;formula&gt;\n15 TRUE   TRUE            &lt;formula&gt;\n16 TRUE   TRUE            &lt;formula&gt;\n\ncolnames(df_arg_analyses) &lt;- c(\"impute_missing\", \n                               \"remove_outliers\", \n                               \"mod_formula\")\npmap(df_arg_analyses, fit_model, df = diamonds)\n\n[[1]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-18585.3   -804.8    -18.9    537.4  12731.7 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -2256.36      13.06  -172.8   &lt;2e-16 ***\ncarat        7756.43      14.07   551.4   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1549 on 53938 degrees of freedom\nMultiple R-squared:  0.8493,    Adjusted R-squared:  0.8493 \nF-statistic: 3.041e+05 on 1 and 53938 DF,  p-value: &lt; 2.2e-16\n\n\n[[2]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-17540.7   -791.6    -37.6    522.1  12721.4 \n\nCoefficients:\n            Estimate Std. Error  t value Pr(&gt;|t|)    \n(Intercept) -2701.38      15.43 -175.061  &lt; 2e-16 ***\ncarat        7871.08      13.98  563.040  &lt; 2e-16 ***\ncut.L        1239.80      26.10   47.502  &lt; 2e-16 ***\ncut.Q        -528.60      23.13  -22.851  &lt; 2e-16 ***\ncut.C         367.91      20.21   18.201  &lt; 2e-16 ***\ncut^4          74.59      16.24    4.593 4.37e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1511 on 53934 degrees of freedom\nMultiple R-squared:  0.8565,    Adjusted R-squared:  0.8565 \nF-statistic: 6.437e+04 on 5 and 53934 DF,  p-value: &lt; 2.2e-16\n\n\n[[3]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-16842.5   -636.4   -114.3    474.8  11238.6 \n\nCoefficients:\n             Estimate Std. Error  t value Pr(&gt;|t|)    \n(Intercept) -3187.540     14.475 -220.208   &lt;2e-16 ***\ncarat        8472.026     12.615  671.584   &lt;2e-16 ***\ncut.L         713.804     22.511   31.709   &lt;2e-16 ***\ncut.Q        -334.503     19.828  -16.871   &lt;2e-16 ***\ncut.C         188.482     17.218   10.947   &lt;2e-16 ***\ncut^4           1.663     13.794    0.121   0.9040    \nclarity.L    4011.681     33.931  118.231   &lt;2e-16 ***\nclarity.Q   -1821.922     31.870  -57.167   &lt;2e-16 ***\nclarity.C     917.658     27.313   33.598   &lt;2e-16 ***\nclarity^4    -430.047     21.831  -19.699   &lt;2e-16 ***\nclarity^5     257.141     17.821   14.429   &lt;2e-16 ***\nclarity^6      26.909     15.539    1.732   0.0833 .  \nclarity^7     186.742     13.685   13.646   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1281 on 53927 degrees of freedom\nMultiple R-squared:  0.8969,    Adjusted R-squared:  0.8969 \nF-statistic: 3.911e+04 on 12 and 53927 DF,  p-value: &lt; 2.2e-16\n\n\n[[4]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-16813.5   -680.4   -197.6    466.4  10394.9 \n\nCoefficients:\n             Estimate Std. Error  t value Pr(&gt;|t|)    \n(Intercept) -3710.603     13.980 -265.414  &lt; 2e-16 ***\ncarat        8886.129     12.034  738.437  &lt; 2e-16 ***\ncut.L         698.907     20.335   34.369  &lt; 2e-16 ***\ncut.Q        -327.686     17.911  -18.295  &lt; 2e-16 ***\ncut.C         180.565     15.557   11.607  &lt; 2e-16 ***\ncut^4          -1.207     12.458   -0.097    0.923    \nclarity.L    4217.535     30.831  136.794  &lt; 2e-16 ***\nclarity.Q   -1832.406     28.827  -63.565  &lt; 2e-16 ***\nclarity.C     923.273     24.679   37.411  &lt; 2e-16 ***\nclarity^4    -361.995     19.739  -18.339  &lt; 2e-16 ***\nclarity^5     216.616     16.109   13.447  &lt; 2e-16 ***\nclarity^6       2.105     14.037    0.150    0.881    \nclarity^7     110.340     12.383    8.910  &lt; 2e-16 ***\ncolor.L     -1910.288     17.712 -107.853  &lt; 2e-16 ***\ncolor.Q      -627.954     16.121  -38.952  &lt; 2e-16 ***\ncolor.C      -171.960     15.070  -11.410  &lt; 2e-16 ***\ncolor^4        21.678     13.840    1.566    0.117    \ncolor^5       -85.943     13.076   -6.572 5.00e-11 ***\ncolor^6       -49.986     11.889   -4.205 2.62e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1157 on 53921 degrees of freedom\nMultiple R-squared:  0.9159,    Adjusted R-squared:  0.9159 \nF-statistic: 3.264e+04 on 18 and 53921 DF,  p-value: &lt; 2.2e-16\n\n\n[[5]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-19548.0  -1169.4   -124.1    716.9  12326.3 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -1996.95      32.86  -60.77   &lt;2e-16 ***\ncarat        7896.79      26.53  297.69   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2106 on 22220 degrees of freedom\nMultiple R-squared:  0.7995,    Adjusted R-squared:  0.7995 \nF-statistic: 8.862e+04 on 1 and 22220 DF,  p-value: &lt; 2.2e-16\n\n\n[[6]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-17890.3  -1188.2   -151.4    771.9  12292.5 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -2590.29      37.35 -69.351   &lt;2e-16 ***\ncarat        8016.70      26.39 303.749   &lt;2e-16 ***\ncut.L        1661.97      56.23  29.556   &lt;2e-16 ***\ncut.Q        -825.12      49.75 -16.586   &lt;2e-16 ***\ncut.C         579.18      43.26  13.388   &lt;2e-16 ***\ncut^4          85.55      34.19   2.502   0.0124 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2060 on 22216 degrees of freedom\nMultiple R-squared:  0.8082,    Adjusted R-squared:  0.8081 \nF-statistic: 1.872e+04 on 5 and 22216 DF,  p-value: &lt; 2.2e-16\n\n\n[[7]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-15684.7   -975.1    -97.5    754.6   9335.7 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -3185.64      34.80 -91.533   &lt;2e-16 ***\ncarat        8723.68      22.86 381.626   &lt;2e-16 ***\ncut.L         940.47      46.88  20.062   &lt;2e-16 ***\ncut.Q        -425.26      41.24 -10.312   &lt;2e-16 ***\ncut.C         319.12      35.61   8.960   &lt;2e-16 ***\ncut^4          23.40      28.09   0.833    0.405    \nclarity.L    6723.96      78.34  85.827   &lt;2e-16 ***\nclarity.Q   -2185.28      74.08 -29.499   &lt;2e-16 ***\nclarity.C    1778.65      63.57  27.980   &lt;2e-16 ***\nclarity^4    -827.00      51.59 -16.031   &lt;2e-16 ***\nclarity^5     554.07      41.84  13.244   &lt;2e-16 ***\nclarity^6      40.42      34.72   1.164    0.244    \nclarity^7     323.78      28.26  11.459   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1689 on 22209 degrees of freedom\nMultiple R-squared:  0.8711,    Adjusted R-squared:  0.871 \nF-statistic: 1.25e+04 on 12 and 22209 DF,  p-value: &lt; 2.2e-16\n\n\n[[8]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-15533.0   -844.8   -216.3    655.4   8241.1 \n\nCoefficients:\n             Estimate Std. Error  t value Pr(&gt;|t|)    \n(Intercept) -4116.384     31.042 -132.607  &lt; 2e-16 ***\ncarat        9383.805     20.523  457.243  &lt; 2e-16 ***\ncut.L         987.938     39.482   25.023  &lt; 2e-16 ***\ncut.Q        -407.735     34.732  -11.739  &lt; 2e-16 ***\ncut.C         326.332     30.004   10.876  &lt; 2e-16 ***\ncut^4           8.035     23.648    0.340   0.7340    \nclarity.L    6974.045     66.208  105.335  &lt; 2e-16 ***\nclarity.Q   -2359.678     62.392  -37.820  &lt; 2e-16 ***\nclarity.C    1778.909     53.599   33.189  &lt; 2e-16 ***\nclarity^4    -705.668     43.480  -16.230  &lt; 2e-16 ***\nclarity^5     516.027     35.277   14.628  &lt; 2e-16 ***\nclarity^6     -13.279     29.237   -0.454   0.6497    \nclarity^7     192.602     23.833    8.081 6.73e-16 ***\ncolor.L     -3027.357     33.038  -91.632  &lt; 2e-16 ***\ncolor.Q      -915.725     29.687  -30.846  &lt; 2e-16 ***\ncolor.C      -169.562     28.035   -6.048 1.49e-09 ***\ncolor^4       -33.016     25.927   -1.273   0.2029    \ncolor^5      -169.411     24.585   -6.891 5.69e-12 ***\ncolor^6       -39.508     22.351   -1.768   0.0771 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1422 on 22203 degrees of freedom\nMultiple R-squared:  0.9087,    Adjusted R-squared:  0.9086 \nF-statistic: 1.227e+04 on 18 and 22203 DF,  p-value: &lt; 2.2e-16\n\n\n[[9]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-18585.3   -804.8    -18.9    537.4  12731.7 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -2256.36      13.06  -172.8   &lt;2e-16 ***\ncarat        7756.43      14.07   551.4   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1549 on 53938 degrees of freedom\nMultiple R-squared:  0.8493,    Adjusted R-squared:  0.8493 \nF-statistic: 3.041e+05 on 1 and 53938 DF,  p-value: &lt; 2.2e-16\n\n\n[[10]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-17540.7   -791.6    -37.6    522.1  12721.4 \n\nCoefficients:\n            Estimate Std. Error  t value Pr(&gt;|t|)    \n(Intercept) -2701.38      15.43 -175.061  &lt; 2e-16 ***\ncarat        7871.08      13.98  563.040  &lt; 2e-16 ***\ncut.L        1239.80      26.10   47.502  &lt; 2e-16 ***\ncut.Q        -528.60      23.13  -22.851  &lt; 2e-16 ***\ncut.C         367.91      20.21   18.201  &lt; 2e-16 ***\ncut^4          74.59      16.24    4.593 4.37e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1511 on 53934 degrees of freedom\nMultiple R-squared:  0.8565,    Adjusted R-squared:  0.8565 \nF-statistic: 6.437e+04 on 5 and 53934 DF,  p-value: &lt; 2.2e-16\n\n\n[[11]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-16842.5   -636.4   -114.3    474.8  11238.6 \n\nCoefficients:\n             Estimate Std. Error  t value Pr(&gt;|t|)    \n(Intercept) -3187.540     14.475 -220.208   &lt;2e-16 ***\ncarat        8472.026     12.615  671.584   &lt;2e-16 ***\ncut.L         713.804     22.511   31.709   &lt;2e-16 ***\ncut.Q        -334.503     19.828  -16.871   &lt;2e-16 ***\ncut.C         188.482     17.218   10.947   &lt;2e-16 ***\ncut^4           1.663     13.794    0.121   0.9040    \nclarity.L    4011.681     33.931  118.231   &lt;2e-16 ***\nclarity.Q   -1821.922     31.870  -57.167   &lt;2e-16 ***\nclarity.C     917.658     27.313   33.598   &lt;2e-16 ***\nclarity^4    -430.047     21.831  -19.699   &lt;2e-16 ***\nclarity^5     257.141     17.821   14.429   &lt;2e-16 ***\nclarity^6      26.909     15.539    1.732   0.0833 .  \nclarity^7     186.742     13.685   13.646   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1281 on 53927 degrees of freedom\nMultiple R-squared:  0.8969,    Adjusted R-squared:  0.8969 \nF-statistic: 3.911e+04 on 12 and 53927 DF,  p-value: &lt; 2.2e-16\n\n\n[[12]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-16813.5   -680.4   -197.6    466.4  10394.9 \n\nCoefficients:\n             Estimate Std. Error  t value Pr(&gt;|t|)    \n(Intercept) -3710.603     13.980 -265.414  &lt; 2e-16 ***\ncarat        8886.129     12.034  738.437  &lt; 2e-16 ***\ncut.L         698.907     20.335   34.369  &lt; 2e-16 ***\ncut.Q        -327.686     17.911  -18.295  &lt; 2e-16 ***\ncut.C         180.565     15.557   11.607  &lt; 2e-16 ***\ncut^4          -1.207     12.458   -0.097    0.923    \nclarity.L    4217.535     30.831  136.794  &lt; 2e-16 ***\nclarity.Q   -1832.406     28.827  -63.565  &lt; 2e-16 ***\nclarity.C     923.273     24.679   37.411  &lt; 2e-16 ***\nclarity^4    -361.995     19.739  -18.339  &lt; 2e-16 ***\nclarity^5     216.616     16.109   13.447  &lt; 2e-16 ***\nclarity^6       2.105     14.037    0.150    0.881    \nclarity^7     110.340     12.383    8.910  &lt; 2e-16 ***\ncolor.L     -1910.288     17.712 -107.853  &lt; 2e-16 ***\ncolor.Q      -627.954     16.121  -38.952  &lt; 2e-16 ***\ncolor.C      -171.960     15.070  -11.410  &lt; 2e-16 ***\ncolor^4        21.678     13.840    1.566    0.117    \ncolor^5       -85.943     13.076   -6.572 5.00e-11 ***\ncolor^6       -49.986     11.889   -4.205 2.62e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1157 on 53921 degrees of freedom\nMultiple R-squared:  0.9159,    Adjusted R-squared:  0.9159 \nF-statistic: 3.264e+04 on 18 and 53921 DF,  p-value: &lt; 2.2e-16\n\n\n[[13]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-19548.0  -1169.4   -124.1    716.9  12326.3 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -1996.95      32.86  -60.77   &lt;2e-16 ***\ncarat        7896.79      26.53  297.69   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2106 on 22220 degrees of freedom\nMultiple R-squared:  0.7995,    Adjusted R-squared:  0.7995 \nF-statistic: 8.862e+04 on 1 and 22220 DF,  p-value: &lt; 2.2e-16\n\n\n[[14]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-17890.3  -1188.2   -151.4    771.9  12292.5 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -2590.29      37.35 -69.351   &lt;2e-16 ***\ncarat        8016.70      26.39 303.749   &lt;2e-16 ***\ncut.L        1661.97      56.23  29.556   &lt;2e-16 ***\ncut.Q        -825.12      49.75 -16.586   &lt;2e-16 ***\ncut.C         579.18      43.26  13.388   &lt;2e-16 ***\ncut^4          85.55      34.19   2.502   0.0124 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2060 on 22216 degrees of freedom\nMultiple R-squared:  0.8082,    Adjusted R-squared:  0.8081 \nF-statistic: 1.872e+04 on 5 and 22216 DF,  p-value: &lt; 2.2e-16\n\n\n[[15]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-15684.7   -975.1    -97.5    754.6   9335.7 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -3185.64      34.80 -91.533   &lt;2e-16 ***\ncarat        8723.68      22.86 381.626   &lt;2e-16 ***\ncut.L         940.47      46.88  20.062   &lt;2e-16 ***\ncut.Q        -425.26      41.24 -10.312   &lt;2e-16 ***\ncut.C         319.12      35.61   8.960   &lt;2e-16 ***\ncut^4          23.40      28.09   0.833    0.405    \nclarity.L    6723.96      78.34  85.827   &lt;2e-16 ***\nclarity.Q   -2185.28      74.08 -29.499   &lt;2e-16 ***\nclarity.C    1778.65      63.57  27.980   &lt;2e-16 ***\nclarity^4    -827.00      51.59 -16.031   &lt;2e-16 ***\nclarity^5     554.07      41.84  13.244   &lt;2e-16 ***\nclarity^6      40.42      34.72   1.164    0.244    \nclarity^7     323.78      28.26  11.459   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1689 on 22209 degrees of freedom\nMultiple R-squared:  0.8711,    Adjusted R-squared:  0.871 \nF-statistic: 1.25e+04 on 12 and 22209 DF,  p-value: &lt; 2.2e-16\n\n\n[[16]]\n\nCall:\nlm(formula = mod_formula, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-15533.0   -844.8   -216.3    655.4   8241.1 \n\nCoefficients:\n             Estimate Std. Error  t value Pr(&gt;|t|)    \n(Intercept) -4116.384     31.042 -132.607  &lt; 2e-16 ***\ncarat        9383.805     20.523  457.243  &lt; 2e-16 ***\ncut.L         987.938     39.482   25.023  &lt; 2e-16 ***\ncut.Q        -407.735     34.732  -11.739  &lt; 2e-16 ***\ncut.C         326.332     30.004   10.876  &lt; 2e-16 ***\ncut^4           8.035     23.648    0.340   0.7340    \nclarity.L    6974.045     66.208  105.335  &lt; 2e-16 ***\nclarity.Q   -2359.678     62.392  -37.820  &lt; 2e-16 ***\nclarity.C    1778.909     53.599   33.189  &lt; 2e-16 ***\nclarity^4    -705.668     43.480  -16.230  &lt; 2e-16 ***\nclarity^5     516.027     35.277   14.628  &lt; 2e-16 ***\nclarity^6     -13.279     29.237   -0.454   0.6497    \nclarity^7     192.602     23.833    8.081 6.73e-16 ***\ncolor.L     -3027.357     33.038  -91.632  &lt; 2e-16 ***\ncolor.Q      -915.725     29.687  -30.846  &lt; 2e-16 ***\ncolor.C      -169.562     28.035   -6.048 1.49e-09 ***\ncolor^4       -33.016     25.927   -1.273   0.2029    \ncolor^5      -169.411     24.585   -6.891 5.69e-12 ***\ncolor^6       -39.508     22.351   -1.768   0.0771 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1422 on 22203 degrees of freedom\nMultiple R-squared:  0.9087,    Adjusted R-squared:  0.9086 \nF-statistic: 1.227e+04 on 18 and 22203 DF,  p-value: &lt; 2.2e-16"
  },
  {
    "objectID": "portfolio/2025-06-02-using-APIs/index.html",
    "href": "portfolio/2025-06-02-using-APIs/index.html",
    "title": "Using APIs",
    "section": "",
    "text": "Writing a function to request satellite pass data from the Public satellite pass API. Pulling the data for satellite passes from US State Capitols.\n\n# Writing a function to interface with API\n\nget_city_info &lt;- function(lat, long) {\n  url &lt;- paste0(\"https://api.g7vrd.co.uk/v1/satellite-passes/25544/\",\n                lat, \"/\", long, \".json?hours=72\") # pulls by lat long\n  \n  res &lt;- try(GET(url), silent = TRUE)\n  content &lt;- content(res, \"text\", encoding = \"UTF-8\")\n  json_data &lt;- fromJSON(content, flatten = TRUE)\n  return(json_data)\n}\n\n# Pulling from the API\n\ncity_info &lt;- cities %&gt;%\n  mutate(info = pmap(list(lat, long), get_city_info))\n\n\n\nBuilding a leaflet plot to display the satellite passes over each state capitol\n\n# Loading pre-processed data from API call on June 8th, 2025\n\npopup_data &lt;- readRDS(\"popup_data.RDS\")\nordered_cities &lt;- readRDS(\"ordered_cities.RDS\")\n\n\n# Displaying data pulled from the API on June 8th, 2025\n\nleaflet(popup_data) %&gt;%\n  addProviderTiles(providers$Esri.WorldImagery) %&gt;%\n  addMarkers(\n    lng = ~long,\n    lat = ~lat,\n    label = ~paste0(city, \": \", soonest),  # Hover info\n    popup = ~paste0(\n      \"&lt;strong&gt;\", city, \"&lt;/strong&gt;&lt;br&gt;\",\n      \"Upcoming ISS Passes:&lt;br&gt;\",\n      all_passes\n    ),\n    icon = makeIcon(\n      iconUrl = \"rocket.svg\",\n      iconWidth = 15, iconHeight = 15)\n  ) %&gt;%\n  addPolylines(\n    lng = ordered_cities$long,\n    lat = ordered_cities$lat,\n    color = \"blue\",\n    weight = 2,\n    opacity = 0.8,\n    label = \"ISS Pass Order\"\n  )"
  },
  {
    "objectID": "portfolio/2025-06-03-web-scraping/index.html",
    "href": "portfolio/2025-06-03-web-scraping/index.html",
    "title": "Web Scraping",
    "section": "",
    "text": "When web scraping, always check the robots.txt file to ensure you’re complying with the rules the website owners have outlined. This is an exmple of ethical scraping!\n\nurl &lt;- \"https://www.cheese.com/robots.txt\"\n\ncon &lt;- curl(url)\nreadLines(con)\n\n[1] \"User-agent: *\"                              \n[2] \"Sitemap: https://www.cheese.com/sitemap.xml\"\n\n\n\n\nUsing html_attr() from the rvest package to receive a character vector containing all items with a particular attribute from cheese.com\n\ncheese_page &lt;- read_html(\"https://www.cheese.com\")\n\n#Using html_attr() to find the destinations of all links on the cheese.com home page\ncheese_links &lt;- cheese_page %&gt;% \n  html_elements(\"a\") %&gt;% \n  html_attr(\"href\")\n\nhead(cheese_links)\n\n[1] \"/\"              \"/alphabetical/\" \"#\"              \"/by_type/\"     \n[5] \"/by_country/\"   \"/by_milk/\"     \n\n#Using html_attr() to find the sources of all images on the cheese.com home page\ncheese_pics &lt;- cheese_page %&gt;%\n  html_elements(\"img\") %&gt;%\n  html_attr(\"src\")\n\nhead(cheese_pics)\n\n[1] \"/static/common/img/logo.3feae68fc57a.svg\"                        \n[2] \"/static/common/img/icons/social-icons/facebook.98fc69d1981d.svg\" \n[3] \"/static/common/img/icons/social-icons/instagram.b64d52d8256e.svg\"\n[4] \"/static/common/img/icons/social-icons/x.bd16396d1592.svg\"        \n[5] \"/static/common/img/icons/social-icons/youtube.24a41972a277.svg\"  \n[6] \"/static/common/img/icons/icon-cheese-gifts.398231b86acd.svg\"     \n\n\n\n\nBuilding functions for scraping cheese.com for information on all cheeses\n\n# Helper functions\n\nget_text_from_page &lt;- function(page, css_selector) {\n    \n  page %&gt;%\n    html_elements(css_selector) %&gt;%\n    html_text(trim = T)\n}\n\nget_url_from_page &lt;- function(page, css_selector) {\n    \n  page %&gt;%\n    html_elements(css_selector) %&gt;%\n    html_attr(\"href\")\n}\n\nget_image_from_page &lt;- function(page, css_selector) {\n    \n  page %&gt;%\n    html_elements(css_selector) %&gt;%\n    html_attr(\"src\")\n}\n\nscrape_page &lt;- function(url) {\n    \n    # 1 second crawl delay\n    Sys.sleep(1)\n    \n    # Read the page\n    page &lt;- read_html(url)\n    \n    # Grab elements from the page\n    cheese_names &lt;- get_text_from_page(page, \".product-item\")\n    cheese_url &lt;- get_url_from_page(page, \".product-item a\")\n    cheese_image &lt;- get_image_from_page(page, \".product-item img\")\n    \n    # Clean cheese names\n    cheese_names &lt;- cheese_names %&gt;%\n      trimws()\n    \n    cheese_names &lt;- ifelse(\n      str_detect(cheese_names, \"Stores &gt;\"),\n      str_trim(str_extract(cheese_names, \"[^\\n]+$\")),\n      cheese_names\n      )\n    \n    # Full cheese URL\n    base_url &lt;- \"https://www.cheese.com\"\n    cheese_url &lt;- paste0(base_url, cheese_url)\n    cheese_url &lt;- unique(cheese_url[!grepl(\"store\", cheese_url)]) #remove store links + duplicates\n    \n    # Find cheeses with image\n    has_image &lt;- ifelse(grepl(\"static\", cheese_image), \"No\", \"Yes\")\n    \n    #Put page elements into a dataframe\n    cheeses &lt;- data.frame(\n      cheese = cheese_names,\n      url = cheese_url,\n      image = has_image\n    )\n    \n    return(cheeses)\n}\n\n# Scraping the website\n\nbase_url &lt;- \"https://www.cheese.com/alphabetical/?per_page=100\"\n\nurls_all_pages &lt;- c(str_c(base_url,\n                          \"&page=\",\n                          1:21)\n                     )\n\nall_pages &lt;- map(urls_all_pages, scrape_page)\n\nall_cheeses &lt;- bind_rows(all_pages)\n\nhead(all_cheeses)\n\n                             cheese\n1           2 Year Aged Cumin Gouda\n2            3-Cheese Italian Blend\n3 30 Month Aged Parmigiano Reggiano\n4           3yrs Aged Vintage Gouda\n5                        Aarewasser\n6                  Abbaye de Belloc\n                                                             url image\n1                https://www.cheese.com/2-year-aged-cumin-gouda/   Yes\n2                 https://www.cheese.com/3-cheese-italian-blend/    No\n3 https://www.cheese.com/30-month-aged-parmigiano-reggiano-150g/   Yes\n4                https://www.cheese.com/3yrs-aged-vintage-gouda/   Yes\n5                             https://www.cheese.com/aarewasser/   Yes\n6                       https://www.cheese.com/abbaye-de-belloc/   Yes\n\n\n\n\nBuilding functions for scraping cheese.com for more detailed information from specific cheeses\n\n# Helper functions\n\nclean_info &lt;- function(text, fallback) {\n  if (length(text) == 0) {\n    return(fallback)\n  } else {\n    cleaned &lt;- sub(\".*?:\\\\s*\", \"\", text) # Extract everything after \": \"\n    return(trimws(cleaned))\n  }\n}\n\nscrape_cheese &lt;- function(url) {\n    \n    # 1 second crawl delay\n    Sys.sleep(1)\n    \n    # Read the page\n    page &lt;- read_html(url)\n    \n    # Grab elements from the page\n    milk &lt;- get_text_from_page(page, \".summary_milk\")\n    country &lt;- get_text_from_page(page, \".summary_country\")\n    family &lt;- get_text_from_page(page, \".summary_family\")\n    type &lt;- get_text_from_page(page, \".summary_moisture_and_type\")\n    flavor &lt;- get_text_from_page(page, \".summary_taste\")\n    \n    # Clean elements\n    milk &lt;- clean_info(milk, \"No milk information available\")\n    country &lt;- clean_info(country, \"No country information available\")\n    family &lt;- clean_info(family, \"No family information available\")\n    type &lt;- clean_info(type, \"No type information available\")\n    flavor &lt;- clean_info(flavor, \"No flavor information available\")\n    \n    # Puts elements into data frame\n    cheese &lt;- data.frame(\n      milk = milk,\n      country = country,\n      family = family,\n      type = type,\n      flavor = flavor\n    )\n}\n\n# Scraping the website\n\nsampled_cheeses &lt;- all_cheeses %&gt;%\n  sample_n(10)\n\ndetailed_cheeses &lt;- sampled_cheeses$url %&gt;%\n  map_df(scrape_cheese)\n\nfinal_cheese_info &lt;- bind_cols(\n  sampled_cheeses %&gt;% select(cheese),\n  detailed_cheeses\n)\n\nprint(final_cheese_info)\n\n                        cheese\n1                    Snow Camp\n2                       Coalho\n3      Stella Reduced Fat Blue\n4                  Blue Yonder\n5                     Grabetto\n6                San Simón DOP\n7  Zanetti Parmigiano Reggiano\n8                    Lou Palou\n9            Caprice des Dieux\n10                      Postel\n                                                 milk       country\n1         Made from pasteurized cow's and goat's milk United States\n2   Made from pasteurized or unpasteurized cow's milk        Brazil\n3                    Made from pasteurized cow's milk United States\n4                  Made from unpasteurized cow's milk United States\n5  Made from pasteurized or unpasteurized goat's milk     Australia\n6                    Made from pasteurized cow's milk         Spain\n7                  Made from unpasteurized cow's milk         Italy\n8                                Made from cow's milk        France\n9                    Made from pasteurized cow's milk        France\n10                   Made from pasteurized cow's milk       Belgium\n                            family                          type\n1  No family information available                          soft\n2  No family information available                     semi-hard\n3                             Blue            semi-soft, artisan\n4                             Blue        semi-soft, blue-veined\n5  No family information available       semi-hard, soft-ripened\n6  No family information available                     semi-soft\n7                         Parmesan                 hard, artisan\n8  No family information available                     semi-soft\n9  No family information available            soft, soft-ripened\n10 No family information available No type information available\n                            flavor\n1                  buttery, creamy\n2                    acidic, salty\n3                    full-flavored\n4                           subtle\n5              nutty, sharp, tangy\n6                          buttery\n7                    nutty, savory\n8  No flavor information available\n9           buttery, nutty, smooth\n10 No flavor information available"
  },
  {
    "objectID": "portfolio/2025-06-08-generative-art/index.html",
    "href": "portfolio/2025-06-08-generative-art/index.html",
    "title": "Generative Art",
    "section": "",
    "text": "#using a phytoplankton monitoring time series from Morro Bay\n\nhab &lt;- read.csv(\"MBF_upload.csv\")\n\n#modifying and overlaying data on a single plot\n\nhab_spiral &lt;- hab |&gt;\n  ggplot() +\n  geom_point(aes(Day.of.Year..1.365., \n             log10(Total.Phytoplankton..cells.L.), \n             colour = Day.of.Year..1.365., \n             size = Avg.Chloro..mg.m3./2),\n             show.legend = FALSE) +\n  geom_point(aes(abs(366-Day.of.Year..1.365.), \n             log(Total.Phytoplankton..cells.L.), \n             colour = Day.of.Year..1.365., \n             size = Avg.Chloro..mg.m3.),\n             show.legend = FALSE) +\n  geom_bar(aes(Day.of.Year..1.365., \n              log10(Akashiwo.sanguinea..cells.L.), \n              colour  = Temp..deg.C.*20),\n           stat = \"identity\", \n           show.legend = FALSE) +\n  geom_bar(aes(Day.of.Year..1.365., \n              log10(Pseudo.nitzschia.seriata.group..cells.L.), \n              colour  = Temp..deg.C.*10),\n           stat = \"identity\", \n           show.legend = FALSE) +\n  coord_polar() + \n  theme_void() +\n  scale_color_viridis_c()\n\nhab_spiral\n\n\n\n\n\n\n\n\n\n\n\n\nWhen viewed under a microscope, the phytoplankton that inhabit the ocean can appear as numerous as the stars in the sky. This piece uses a plankton monitoring time series as the underlying dataset, from which transformations, aesthetic manipulations, and layering result in a swirling assortment of points and rays akin to a solar system. This piece evokes the continuum between microscopic and macroscopic, the inherent link between the smallest and largest scales accessible to human observation.\n\n\n\nUsing coord_polar() changes the structure of the x-axis so all the data spirals around a central point. Multiple data transformations (such as log scaling) are used in the layered geom_bar() and geom_point() calls to space out the data so it has a characteristic cosmic feel, like asteroid belts encircling the sun."
  },
  {
    "objectID": "portfolio/2025-06-08-generative-art/index.html#title-galaxsea",
    "href": "portfolio/2025-06-08-generative-art/index.html#title-galaxsea",
    "title": "Generative Art",
    "section": "",
    "text": "When viewed under a microscope, the phytoplankton that inhabit the ocean can appear as numerous as the stars in the sky. This piece uses a plankton monitoring time series as the underlying dataset, from which transformations, aesthetic manipulations, and layering result in a swirling assortment of points and rays akin to a solar system. This piece evokes the continuum between microscopic and macroscopic, the inherent link between the smallest and largest scales accessible to human observation.\n\n\n\nUsing coord_polar() changes the structure of the x-axis so all the data spirals around a central point. Multiple data transformations (such as log scaling) are used in the layered geom_bar() and geom_point() calls to space out the data so it has a characteristic cosmic feel, like asteroid belts encircling the sun."
  },
  {
    "objectID": "portfolio/2025-06-08-generative-art/index.html#title-nebulagon",
    "href": "portfolio/2025-06-08-generative-art/index.html#title-nebulagon",
    "title": "Generative Art",
    "section": "Title: Nebulagon",
    "text": "Title: Nebulagon\n\nDramatic Description\nA nebula at the outskirts of a distant galaxy. Within the gas and cosmic dust, a set of rings stand out, their seemingly-purposeful angularity denoting intelligent design amidst chaos. Perhaps leftover structures from an ancient, insterstellar race? Do you dare approach?\n\n\nCode Choices\nThe sample_canva() function generates a random palette that is replicable if we set a “seed”. The fracture() function used when “painting the canvas” takes the noise generated using gen_simplex() and repeatedly applies it at different frequencies. By setting “octaves” to 20, the generator and fractal functions iterate over the algorithm 20 times. The nonagon structure is first built as a tibble, then rescaled using some simple transformations so it appears at the center of the final plot. The final image brings all elements together by layering polygons on top of a raster base."
  }
]